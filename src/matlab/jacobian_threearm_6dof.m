function [J, Jx, Jq] = jacobian_threearm_6dof(auv_rot, q)
% Jx*xdot = Jq*qdot
% qdot = J_parallel*xdot
% J_parallel = pinv(Jq)*Jx
sequence = 'XZZXZX';
num_arms = 3;
num_links = 6;
DOF = num_arms*num_links;


% arm_base_x = 0.22637;
% arm_base_y = 0.09553;
% arm_base_z = 0.11328;
arm_base_x = 0.4572/2;
arm_base_y = 0.100;
arm_base_z = 0.100;
ab = zeros(3,1,num_arms);
ab(:, :, 1) = [arm_base_x; -arm_base_y; -arm_base_z];
ab(:, :, 2) = [arm_base_x; arm_base_y; -arm_base_z];
ab(:, :, 3) = [arm_base_x; 0; sqrt(arm_base_y^2 + arm_base_z^2)];

l1 = [0.115;0;0];
l2 = [0.140;0;0];
l3 = [0.115;0;0];
l4 = [0.100;0;0];
l5 = [0.115;0;0];
l6 = [0.120;0;0];


r_a_e = zeros(3,1,num_arms);
for i=1:num_arms
    Q = [];
    for j=1:num_links
        Q = [Q, q(num_links*(i - 1) + j)];
    end

    r_a_e(:, :, i) = ab(:, :, i) + ...
        rot(Q(1), sequence(1))*(l1 + ...
        rot(Q(2), sequence(2))*(l2 + ...
        rot(Q(3), sequence(3))*(l3 + ...
        rot(Q(4), sequence(4))*(l4 + ...
        rot(Q(5), sequence(5))*(l5 + ...
        rot(Q(6), sequence(6))*(l6))))));
end

M = zeros(3, num_links, num_arms);
S = zeros(3, num_links, num_arms);
for i=1:num_arms
    Q = [];
    for j=1:num_links
        Q = [Q, q(num_links*(i - 1) + j)];
    end
    m1 = -auv_rot*rot_der(Q(1), sequence(1))*(l1 + ...
        rot(Q(2), sequence(2))*(l2 + ...
        rot(Q(3), sequence(3))*(l3 + ...
        rot(Q(4), sequence(4))*(l4 + ...
        rot(Q(5), sequence(5))*(l5 + ...
        rot(Q(6), sequence(6))*(l6))))));
    m2 = -auv_rot*rot(Q(1), sequence(1))*...
        rot_der(Q(2), sequence(2))*(l2 + ...
        rot(Q(3), sequence(3))*(l3 + ...
        rot(Q(4), sequence(4))*(l4 + ...
        rot(Q(5), sequence(5))*(l5 + ...
        rot(Q(6), sequence(6))*(l6)))));
    m3 = -auv_rot*rot(Q(1), sequence(1))*...
        rot(Q(2), sequence(2))*...
        rot_der(Q(3), sequence(3))*(l3 + ...
        rot(Q(4), sequence(4))*(l4 + ...
        rot(Q(5), sequence(5))*(l5 + ...
        rot(Q(6), sequence(6))*(l6))));
    m4 = -auv_rot*rot(Q(1), sequence(1))*...
        rot(Q(2), sequence(2))*...
        rot(Q(3), sequence(3))*...
        rot_der(Q(4), sequence(4))*(l4 + ...
        rot(Q(5), sequence(5))*(l5 + ...
        rot(Q(6), sequence(6))*(l6)));
    m5 = -auv_rot*rot(Q(1), sequence(1))*...
        rot(Q(2), sequence(2))*...
        rot(Q(3), sequence(3))*...
        rot(Q(4), sequence(4))*...
        rot_der(Q(5), sequence(5))*(l5 + ...
        rot(Q(6), sequence(6))*(l6));
    m6 = -auv_rot*rot(Q(1), sequence(1))*...
        rot(Q(2), sequence(2))*...
        rot(Q(3), sequence(3))*...
        rot(Q(4), sequence(4))*...
        rot(Q(5), sequence(5))*...
        rot_der(Q(6), sequence(6))*l6;
    M(:, :, i) = [m1 m2 m3 m4 m5 m6];

    s1 = auv_rot*rot(Q(1), sequence(1))*...
        axis_sequence(sequence(1));
    s2 = auv_rot*rot(Q(1), sequence(1))*...
        rot(Q(2), sequence(2))*...
        axis_sequence(sequence(2));
    s3 = auv_rot*rot(Q(1), sequence(1))*...
        rot(Q(2), sequence(2))*...
        rot(Q(3), sequence(3))*...
        axis_sequence(sequence(3));
    s4 = auv_rot*rot(Q(1), sequence(1))*...
        rot(Q(2), sequence(2))*...
        rot(Q(3), sequence(3))*...
        rot(Q(4), sequence(4))*...
        axis_sequence(sequence(4));
    s5 = auv_rot*rot(Q(1), sequence(1))*...
        rot(Q(2), sequence(2))*...
        rot(Q(3), sequence(3))*...
        rot(Q(4), sequence(4))*...
        rot(Q(5), sequence(5))*...
        axis_sequence(sequence(5));
    s6 = auv_rot*rot(Q(1), sequence(1))*...
        rot(Q(2), sequence(2))*...
        rot(Q(3), sequence(3))*...
        rot(Q(4), sequence(4))*...
        rot(Q(5), sequence(5))*...
        rot(Q(6), sequence(6))*...
        axis_sequence(sequence(6));
    S(:, :, i) = [s1 s2 s3 s4 s5 s6];
end

Jx = zeros(6*num_arms, 6);
Jq = zeros(6*num_arms, DOF);

for i=1:num_arms
    Jx((6*(i-1)+1):(6*i), :) = ...
        [eye(3), -skewsym(auv_rot*r_a_e(:, :, i));...
        zeros(3,3), eye(3)];
    
    Jq((6*i-5):(6*i), (num_links*(i-1)+1):(num_links*i)) = ...
        [M(:, :, i); ...
        S(:, :, i)];
end




J = pinv(Jq)*Jx;
end

function R = rot(q, axis)
    if axis == 'X'
        R = rotx(q);
    elseif axis == 'Y'
        R = roty(q);
    elseif axis == 'Z'
        R = rotz(q);
    end
end

function R = rot_der(q, axis)
    if axis == 'X'
        R = dRx(q);
    elseif axis == 'Y'
        R = dRy(q);
    elseif axis == 'Z'
        R = dRz(q);
    end
end

function ax = axis_sequence(axis)
    if axis == 'X'
        ax = [1; 0; 0];
    elseif axis == 'Y'
        ax = [0; 1; 0]; 
    elseif axis == 'Z'
        ax = [0; 0; 1];
    end 
end

function R = dRx(a)
R = [0, 0, 0;...
    0, -sin(a), -cos(a);...
    0, cos(a), -sin(a)];
end

function R = dRy(a)
R = [-sin(a), 0 cos(a);...
    0, 0, 0;...
    -cos(a), 0, -sin(a)];
end

function R = dRz(a)
R = [-sin(a), -cos(a), 0;...
    cos(a), -sin(a), 0;...
    0, 0, 0];
end